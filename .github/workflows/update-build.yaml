name: Update build.yaml on new submodule release

on:
  push:
    branches:
      - dependabot/submodules/** # Triggered by Dependabot when a submodule is updated
  workflow_dispatch: # Allows manually triggering the action if needed

permissions:
  contents: write
  pull-requests: write

env:
  SUBMODULE_REPOS: |
    SEAT=https://github.com/tillsteinbach/CarConnectivity-connector-seatcupra.git
    SKODA=https://github.com/tillsteinbach/CarConnectivity-connector-skoda.git
    VW=https://github.com/tillsteinbach/CarConnectivity-connector-volkswagen.git
    TRONITY=https://github.com/tillsteinbach/CarConnectivity-connector-tronity.git
    VOLVO=https://github.com/tillsteinbach/CarConnectivity-connector-volvo.git
    ABRP=https://github.com/tillsteinbach/CarConnectivity-plugin-abrp.git
    MQTT=https://github.com/tillsteinbach/CarConnectivity-plugin-mqtt.git
    MQTTHA=https://github.com/tillsteinbach/CarConnectivity-plugin-mqtt_homeassistant.git
    CC=https://github.com/tillsteinbach/CarConnectivity.git
    WEBUI=https://github.com/tillsteinbach/CarConnectivity-plugin-webui.git

jobs:
  update-versions:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        addon: [carconnectivity-addon, carconnectivity-addon-edge]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true # Also clones submodules

      - name: Get latest versions of submodules ${{ matrix.addon }}...
        run: |
          export LC_ALL=C

          get_latest_version() {
              repo_url=$1
              temp_dir=$(mktemp -d)
          
              git clone --bare --quiet "$repo_url" "$temp_dir" >/dev/null 2>&1
              
              all_tags=$(git -C "$temp_dir" for-each-ref --sort=-creatordate --format '%(refname:short)' refs/tags)
              
              if [ "${{ matrix.addon }}" == "carconnectivity-addon" ]; then
                  latest_version=$(echo "$all_tags" | grep -E '^v?[0-9]+(\.[0-9]+)*$' | head -n 1)
                  if [ -z "$latest_version" ]; then
                      latest_version=$(echo "$all_tags" | head -n 1)
                  fi
              else
                  latest_version=$(echo "$all_tags" | head -n 1)
              fi
                            
              rm -rf "$temp_dir"
              echo "$latest_version"
          }

          echo "Fetching latest versions for submodules"
          for repo_entry in $SUBMODULE_REPOS; do
            name=$(echo "$repo_entry" | cut -d= -f1)
            repo=$(echo "$repo_entry" | cut -d= -f2)

            latest_version=$(get_latest_version "$repo")
            echo "LATEST_${name}_VERSION_${{ matrix.addon }}=$latest_version" >> $GITHUB_ENV
            echo "🔍 Found latest $name version: $latest_version"
          done

      - name: Display old and new versions ${{ matrix.addon }}...
        run: |
          echo "### Current and new versions :"

          compare_versions() {
            local component=$1
            local addon=$2
            local old_version=$(grep "${component}_VERSION" ${addon}/build.yaml | awk '{print $2}' | tr -d '"')
            local new_version_var="LATEST_${component}_VERSION_${addon}"
            local new_version=$(printenv $new_version_var)

            local repo_url=$(echo "$SUBMODULE_REPOS" | grep "^${component}=" | cut -d '=' -f2)
            local repo_name=$(basename "$repo_url" .git)

            if [ -n "$old_version" ] && [ "$old_version" != "$new_version" ]; then
              echo "🔄 ${component}_VERSION: $old_version → $new_version"
              echo "- **${repo_name}** → [$new_version](${repo_url})" >> ${addon}/bot_changelog.md
            fi
          }
            
          # Iterate through a list of components and compare their versions
          for component in SEAT SKODA VW TRONITY VOLVO MQTT MQTTHA CC WEBUI; do
            compare_versions "${component}" "${{ matrix.addon }}"
          done

      - name: Update build.yaml
        run: |
          echo "Updating build.yaml with new versions"
          
          # Iterate through a list of components and update their versions in build.yaml
          for component in SEAT SKODA VW TRONITY VOLVO MQTT MQTTHA CC WEBUI; do
            new_version_var="LATEST_${component}_VERSION_${{ matrix.addon }}"
            new_version=$(printenv $new_version_var)

            sed -i "s/${component}_VERSION: .*/${component}_VERSION: \"$new_version\"/" ${{ matrix.addon }}/build.yaml
          done
      
          # Check if build.yaml has changed after updates
          if git diff --quiet ${{ matrix.addon }}/build.yaml; then
            echo "No update needed."
            echo "CHANGES=false" >> $GITHUB_ENV
          else
            echo "Changes detected."
            echo "CHANGES=true" >> $GITHUB_ENV
          fi || true # Prevent exit failure

      - name: Increment version ${{ matrix.addon }}
        if: env.CHANGES == 'true'
        run: |
          # Extract current version from config.yaml from edge, so it's sync when main is updated
          version=$(grep -E '^version:' "carconnectivity-addon-edge/config.yaml" | awk '{print $2}' | sed 's/"//g')
          # Split the version into parts (x.y.z)
          IFS='.' read -r major minor patch <<< "$version"
          # Increment the patch version (last number)
          patch=$((patch + 1))
          # Construct the new version string
          new_version="${major}.${minor}.${patch}"
          # Update the version in config.yaml
          sed -i "s/^version: .*/version: $new_version/" "${{ matrix.addon }}/config.yaml"
          echo "Version updated: $version -> $new_version"
          echo "NEW_VERSION=$" >> $GITHUB_ENV

          # Backup for later usage
          cp ${{ matrix.addon }}/CHANGELOG.md ${{ matrix.addon }}/old_CHANGELOG.md

          # Append the new version header section to the changelog
          echo -e "## $new_version\n" > ${{ matrix.addon }}/CHANGELOG.md

          if [ -f ${{ matrix.addon }}/next_CHANGELOG.md ] && [ -s ${{ matrix.addon }}/next_CHANGELOG.md ]; then
            echo "### 🚀 New Features" >> ${{ matrix.addon }}/CHANGELOG.md
            cat ${{ matrix.addon }}/next_CHANGELOG.md >> ${{ matrix.addon }}/CHANGELOG.md
            # append to main
            if [ "${{ matrix.addon }}" = "carconnectivity-addon-edge" ]; then
              cat ${{ matrix.addon }}/next_CHANGELOG.md >> carconnectivity-addon/next_CHANGELOG.md
            fi
            > ${{ matrix.addon }}/next_CHANGELOG.md
          fi

          # Append build/fixes section to the changelog
          echo -e "\n### 🛠️ Fixes & Updates\n" >> ${{ matrix.addon }}/CHANGELOG.md  
          cat ${{ matrix.addon }}/bot_changelog.md >> ${{ matrix.addon }}/CHANGELOG.md
          rm ${{ matrix.addon }}/bot_changelog.md

          if [ -f ${{ matrix.addon }}/fix_CHANGELOG.md ] && [ -s ${{ matrix.addon }}/fix_CHANGELOG.md ]; then
            cat ${{ matrix.addon }}/fix_CHANGELOG.md >> ${{ matrix.addon }}/CHANGELOG.md
            # append to main
            if [ "${{ matrix.addon }}" = "carconnectivity-addon-edge" ]; then
              cat ${{ matrix.addon }}/fix_CHANGELOG.md >> carconnectivity-addon/fix_CHANGELOG.md
            fi
            > ${{ matrix.addon }}/fix_CHANGELOG.md
          fi
          echo -e "\n --- \n" >> ${{ matrix.addon }}/CHANGELOG.md


          # Append previous changelog
          cat ${{ matrix.addon }}/old_CHANGELOG.md >> ${{ matrix.addon }}/CHANGELOG.md
          rm ${{ matrix.addon }}/old_CHANGELOG.md

      - name: Commit and push changes on the Current Branch ${{ matrix.addon }}
        if: env.CHANGES == 'true'
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          git pull
          git add .
          git diff --cached --quiet || git commit -m "Update build.yaml with latest submodule versions"
          git push

      - name: Create Pull Request
        if: env.CHANGES == 'true'
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: update-versions-${{ github.run_id }} # Use a unique ID to avoid conflicts
          base: ${{ github.head_ref || github.ref_name }}
          title: "Update Submodule Versions"
          body: |
            Automatically generated by GitHub Actions.
            for component in SEAT SKODA VW TRONITY VOLVO MQTT MQTTHA CC WEBUI; do
              new_version_var="LATEST_${component}_VERSION_${{ matrix.addon }}"
              new_version=$(printenv $new_version_var)

              echo "- **${key}_VERSION** → $(printenv $new_version_var)"; 
            done)
